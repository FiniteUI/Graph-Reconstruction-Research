def BD_Decks(g):
    #this creates and stores the 8^3, 2^2 graphs and their decks, from a cubic graph as input
    #this assumes the graph's name is in the format specified by Dr. Ken
    
    assert type(g) is sage.graphs.graph.Graph, "Error: Graph object input only"
    
    BidegreeSubgraphs = [] #contains a graph, then a tuple of its deck, etc.
    
    #this creates the subgraphs
    for i in g.edges():
        v1 = i[0]
        v2 = i[1]
        x = copy(g)
        x.delete_edge(i)
        x.name("H" + g.name()[1:4] + "e" + str(v1) + str(v2))
        BidegreeSubgraphs.append(x)
        deck = []
       
        #this creates the deck
        for j in x:
            y = copy(x)
            y.delete_vertex(j)
            y.name('V' + x.name()[1:7] + "_" + str(j))
            deck.append(y)
        BidegreeSubgraphs.append(deck)
    return BidegreeSubgraphs

def showAll(L):
    #this simply shows all the decks generated by a BD_Decks call
    #input must be a list generated by BD_Decks()
    for i in L:
        if type(i) is sage.graphs.graph.Graph:
            print i.name()
            i.show()
        else:
            for j in i:
                print j.name()
                j.show()
            
def showSubgraphDeck(L, n):
    #this shows a specific deck from one of the graphs generated in BD_Decks
    
    assert type(n) is Integer, 'Error: (list, Integer) input reuired'
    assert type(L) is list, 'Error: (list, Integer) input reuired'
    
    n = (n-1) * 2
    print("Original Graph:")
    L[n].show()
    print("Deck:")
    for i in L[n+1]:
        i.show()